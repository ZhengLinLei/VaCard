var closeShadow,closeDelete,settingPush,DataCards;const NameLocal_=btoa("data-card"),getBase64FromUrl=async url=>{const data=await fetch(url),blob=await data.blob();return new Promise(resolve=>{const reader=new FileReader;reader.readAsDataURL(blob),reader.onloadend=()=>{const base64data=reader.result;resolve(base64data)}})};localStorage.getItem(NameLocal_)||localStorage.setItem(NameLocal_,btoa("[]")),window.addEventListener("load",()=>{window.addEventListener("appinstalled",evt=>{localStorage.setItem("pwa_installed",1)}),localStorage.getItem("cookies")||(localStorage.setItem("cookies",1),document.getElementById("cookies").classList.add("open"),setTimeout(()=>{document.getElementById("cookies").classList.remove("open")},18e4)),settingPush=()=>{document.querySelector("#setting").classList.toggle("open")},DataCards={data:JSON.parse(atob(localStorage.getItem(NameLocal_))),saveCardDataToSto:()=>{localStorage.setItem(NameLocal_,btoa(JSON.stringify(DataCards.data)))},htmlCardMaker:(index,json)=>{const ColorRandom=["primary","secondary","danger","dark","info","success","warning","muted","white"],randColor=ColorRandom[Math.floor(Math.random()*ColorRandom.length)];return`<div class="column col-12 col-md-6">\n                        <a class="btn btn-${randColor} shadow-sm d-flex justify-content-center align-items-center card-info" data-color="${randColor}" id="card-${index}" onclick="DataCards.openCardQr(this)" data-index="${index}">\n                            <h4>${json.name}</h4>\n                        </a>\n                    </div>`},updateUI:parentEl=>{parentEl.innerHTML="",DataCards.data.forEach((el,index)=>{let html=DataCards.htmlCardMaker(index,el);parentEl.innerHTML+=html})},openCardQr:el=>{let index=el.getAttribute("data-index");shadow.classList.add("open"),qrSection.classList.add("open"),qrSection.querySelector("#qrImg").src=DataCards.data[index].qr64,qrSection.querySelector("#qrName").innerHTML=DataCards.data[index].name,qrSection.querySelector("#qrDate").innerHTML=new Date(1e3*DataCards.data[index].date).toLocaleDateString(void 0,{day:"2-digit",month:"2-digit",year:"numeric"}),qrSection.querySelector("#qrDelete").onclick=()=>DataCards.openDeleteUI(index)},openDeleteUI:index=>{alertDelete.querySelector("#deleteName").innerHTML=DataCards.data[index].name,alertDelete.querySelector("#deleteColor").className=`bg-${document.querySelector(`#card-${index}`).getAttribute("data-color")}`,alertDelete.querySelector("#confirmDelete").onclick=()=>DataCards.deleteCard(index),alertDelete.classList.add("open")},deleteCard:index=>{DataCards.data.splice(index,1),DataCards.saveCardDataToSto(),DataCards.updateUI(mainCardList),closeShadow()}},closeShadow=()=>{[shadow,formAdd,qrSection,alertDelete].forEach(el=>el.classList.remove("open"))},closeDelete=()=>{alertDelete.classList.remove("open")};let mainCardList=document.querySelector("#cardList");DataCards.updateUI(mainCardList);let shadow=document.querySelector(".shadow"),formAdd=document.querySelector("#addNew"),qrSection=document.querySelector("#QRsection"),alertDelete=document.querySelector("#alertDelete"),submitCard=document.querySelector("#submitCard");shadow.addEventListener("click",closeShadow),document.getElementById("add").addEventListener("click",e=>{shadow.classList.add("open"),formAdd.classList.add("open")});let nameInput=document.querySelector("#nameInput"),vaxDate=document.querySelector("#vaxDate"),qrCode=document.querySelector("#qrCode"),errorShow=document.querySelector("#errorSubmit");function resetForm(){nameInput.value="",vaxDate.value="";try{qrCode.value=""}catch(e){}if(qrCode.value){var form=document.createElement("form"),parentNode=qrCode.parentNode,ref=qrCode.nextSibling;form.appendChild(qrCode),form.reset(),parentNode.insertBefore(qrCode,ref)}}qrCode.addEventListener("input",()=>{var pathName=qrCode.value.replace(/^.*?([^\\\/]*)$/,"$1");document.getElementById("fileName").innerHTML=pathName.length>=10?pathName.substring(0,7)+"...":pathName,errorShow.innerHTML=""}),submitCard.addEventListener("submit",e=>{if(e.preventDefault(),nameInput.value&&vaxDate.value&&qrCode.files){const formData=new FormData;formData.append("file",qrCode.files[0]),document.getElementById("loader").classList.add("open"),fetch("http://api.qrserver.com/v1/read-qr-code/",{method:"POST",body:formData}).then(res=>res.json()).then(res=>{if(res[0].symbol[0].data){let urlQR=`https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${res[0].symbol[0].data}`;getBase64FromUrl(urlQR).then(value=>{let vaxCard={name:nameInput.value,date:parseInt((new Date(vaxDate.value).getTime()/1e3).toFixed(0)),hash:res[0].symbol[0].data,qr64:value};DataCards.data.push(vaxCard),DataCards.saveCardDataToSto(),DataCards.updateUI(mainCardList),resetForm(),closeShadow(),document.getElementById("loader").classList.remove("open")})}else errorShow.innerHTML=res[0].symbol[0].error,document.getElementById("loader").classList.remove("open")}).catch(err=>{navigator.onLine?errorShow.innerHTML="Try again":errorShow.innerHTML="Internet error",document.getElementById("loader").classList.remove("open")})}})});